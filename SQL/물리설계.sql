SELECT USER
FROM DUAL;

-- DB설계 취합

-- 1. 계정테이블
CREATE TABLE ACCOUNT
( AC_NO     NUMBER
, CONSTRAINT AC_NO_PK PRIMARY KEY(AC_NO)
);

SELECT * FROM ACCOUNT;

-- 2. 관리자 테이블
CREATE TABLE ADMIN
( AD_ID     VARCHAR2(30)    
, AD_PW     VARCHAR2(30)    NOT NULL
, CONSTRAINT AD_ID_PK PRIMARY KEY(AD_ID)
);

SELECT * FROM ADMIN;

INSERT INTO ADMIN(AD_ID, AD_PW) VALUES('admin1', 'java006$');
INSERT INTO ADMIN(AD_ID, AD_PW) VALUES('admin2', 'java006$');

COMMIT;

-- 1순위
-- 3. 질문 분류 테이블
CREATE TABLE FAQ_SORT
( QS_NO     NUMBER
, NAME      VARCHAR2(20)   
, CONSTRAINT QS_NO_PK   PRIMARY KEY(QS_NO)
);

SELECT * FROM FAQ_SORT;

-- 4. 공지사항 분류 테이블
CREATE TABLE NOTICE_SORT
( NOS_NO    NUMBER
, NAME      VARCHAR2(20)
, CONSTRAINT NOS_NO_PK  PRIMARY KEY(NOS_NO)
);

SELECT * FROM NOTICE_SORT;

-- 5. 신고사유 테이블
CREATE TABLE REPORT_WHY
( WHY_NO    NUMBER
, TITLE     VARCHAR2(200)
, CONSTRAINT WHY_NO_PK PRIMARY KEY(WHY_NO)
);

SELECT * FROM REPORT_WHY;

-- 6. 신고 처리상태 테이블
CREATE TABLE REPORT_STATUS
( STATUS_NO     NUMBER
, STATUSNAME    VARCHAR2(20)
, AD_ID         VARCHAR2(30)
, CONSTRAINT STATUS_NO_PK PRIMARY KEY(STATUS_NO)
, CONSTRAINT AD_ID_FK FOREIGN KEY(AD_ID)
            REFERENCES ADMIN(AD_ID)
);

SELECT * FROM REPORT_STATUS;

ALTER TABLE REPORT_STATUS DROP COLUMN AD_ID;

SELECT * FROM REPORT_STATUS;

-- 7. 서울시 구 (1순위)
CREATE TABLE GU
( GU_NO NUMBER
, GUNAME VARCHAR2(30) NOT NULL
,CONSTRAINT GU_GU_NO_PK PRIMARY KEY (GU_NO)
);

SELECT * FROM GU;

-- 8. 점수 (1순위)
CREATE TABLE SCORE
( SCORENO NUMBER
, SCORENAME NUMBER(1)
,CONSTRAINT SCORE_SCORENO_PK PRIMARY KEY(SCORENO)
);

SELECT * FROM SCORE;

-- 9. 개인정보
CREATE TABLE PERSONAL
( PE_ID         VARCHAR2(30)    NOT NULL
, AC_NO         NUMBER          NOT NULL
, NAME          VARCHAR2(30)    NOT NULL
, TEL           VARCHAR2(30)    NOT NULL
, NICKNAME      VARCHAR2(30)    NOT NULL
, PW            VARCHAR2(30)    NOT NULL
, EMAIL         VARCHAR2(30)    NOT NULL
, ROADADDR      VARCHAR2(50)    NOT NULL
, DETAILADDR    VARCHAR2(100)   NOT NULL
, PROFILE       VARCHAR2(500)
, PEDATE        DATE            NOT NULL
, CONSTRAINT PERSONAL_PE_ID_PK PRIMARY KEY(PE_ID)
, CONSTRAINT PERSONAL_AC_NO_FK FOREIGN KEY(AC_NO)
             REFERENCES ACCOUNT(AC_NO)
, CONSTRAINT PERSONAL_TEL_UK UNIQUE(TEL)
, CONSTRAINT PERSONAL_NICKNAME_UK UNIQUE(NICKNAME)
);

ALTER TABLE PERSONAL MODIFY(EMAIL VARCHAR2(50));
ALTER TABLE PERSONAL MODIFY(ROADADDR VARCHAR2(100));

SELECT * FROM PERSONAL;

INSERT INTO PERSONAL(PE_ID, AC_NO, NAME, TEL, NICKNAME, PW, EMAIL, ROADADDR, DETAILADDR, PROFILE, PEDATE)
VALUES('superman', 1, '홍길동', '010-1111-2222', '슈퍼맨', 'java006$', 'superman@super.com'
    , '서울특별시 마포구 월드컵북로 21(서교동)', '2층 풍성빌딩 쌍용강북교육센터', NULL, SYSDATE);

COMMIT;

-- 10. 거주여부
CREATE TABLE RESIDENCE      -- 거주여부 (1순위)
( RES_NO        NUMBER          NOT NULL
, RESIDENCENAME VARCHAR2(10)    NOT NULL
);

ALTER TABLE RESIDENCE ADD CONSTRAINT RES_NO_PK PRIMARY KEY(RES_NO);
ALTER TABLE RESIDENCE MODIFY(RESIDENCENAME VARCHAR2(20));

SELECT * FROM RESIDENCE;

INSERT INTO RESIDENCE(RES_NO, RESIDENCENAME) VALUES(1, '거주');
INSERT INTO RESIDENCE(RES_NO, RESIDENCENAME) VALUES(2, '거주예정');
INSERT INTO RESIDENCE(RES_NO, RESIDENCENAME) VALUES(3, '비거주');

COMMIT;

-- 11. 탈퇴사유
CREATE TABLE WITHDRAWAL_WHY
( WIR_NO NUMBER
, WHY VARCHAR2(50)
, CONSTRAINT WITHDRAWAL_WHY_NO PRIMARY KEY(WIR_NO)
);

SELECT * FROM WITHDRAWAL_WHY;

--2순위
-- 12.서울시 동 (2순위)
CREATE TABLE DONG
( DONG_NO NUMBER
, GU_NO NUMBER
, DONGNAME VARCHAR2(30) NOT NULL
,CONSTRAINT DONG_DONG_NO_PK PRIMARY KEY(DONG_NO)
,CONSTRAINT DONG_GU_NO_FK FOREIGN KEY(GU_NO)
REFERENCES GU (GU_NO)
);

SELECT * FROM DONG; --------------------------------------- 테스트데이터 이까지는 다 넣었음

-- 13. 탈퇴회원 테이블
CREATE TABLE WITHDRAWAL
( WI_NO     NUMBER
, AC_NO     NUMBER
, WIR_NO    NUMBER
, COMMENTS   VARCHAR2(300)
, WIDATE    DATE
, ID        VARCHAR2(30)
, NAME      VARCHAR2(30)
, TEL       VARCHAR2(30)
, CONSTRAINT WI_NO_PK PRIMARY KEY(WI_NO)
, CONSTRAINT AC_NO_FK   FOREIGN KEY(AC_NO)
            REFERENCES ACCOUNT(AC_NO)
, CONSTRAINT WIR_NO_FK  FOREIGN KEY(WIR_NO)
            REFERENCES WITHDRAWAL_WHY(WIR_NO)
);
--==> Table WITHDRAWAL이(가) 생성되었습니다.
DROP TABLE WITHDRAWAL;

SELECT * FROM WITHDRAWAL;

-- 14. 공지사항
CREATE TABLE NOTICE
( NO_NO     NUMBER          NOT NULL
, AD_ID     VARCHAR2(30)    NOT NULL
, NOS_NO    NUMBER          NOT NULL
, TITLE     VARCHAR2(100)
, CONTENT   VARCHAR2(500)
, NODATE    DATE
, CONSTRAINT NOTICE_NO_NO_PK PRIMARY KEY(NO_NO)
, CONSTRAINT NOTICE_AD_ID_FK FOREIGN KEY(AD_ID)
             REFERENCES ADMIN(AD_ID)
, CONSTRAINT NOTICE_NOS_NO_FK FOREIGN KEY(NOS_NO)
             REFERENCES NOTICE_SORT(NOS_NO)
);

-- 15. 자주 묻는 질문
CREATE TABLE FAQ
( FAQ_NO    NUMBER          NOT NULL
, AD_ID     VARCHAR2(30)    NOT NULL
, QS_NO     NUMBER          NOT NULL
, TITLE     VARCHAR2(100)
, CONTENT   VARCHAR2(500)
, CONSTRAINT FAQ_NO_PK PRIMARY KEY(FAQ_NO)
, CONSTRAINT FAQ_AD_ID_FK FOREIGN KEY(AD_ID)
             REFERENCES ADMIN(AD_ID)
, CONSTRAINT FAQ_QS_NO_FK FOREIGN KEY(QS_NO)
             REFERENCES FAQ_SORT(QS_NO)
);

-- 16. 서비스 소개 게시판
CREATE TABLE INTRODUCTION
( IN_NO     NUMBER          NOT NULL
, AD_ID     VARCHAR2(30)    NOT NULL
, CONTENT   VARCHAR2(500)
, CONSTRAINT INTRO_IN_NO_PK PRIMARY KEY(IN_NO)
, CONSTRAINT INTRO_AD_ID_FK FOREIGN KEY(AD_ID)
             REFERENCES ADMIN(AD_ID)
);

-- 17. 체크리스트
CREATE TABLE CHECKLIST      -- 체크리스트 (2순위)
( CHECK_NO  NUMBER          NOT NULL
, AC_NO     NUMBER          NOT NULL
, RES_NO    NUMBER          NOT NULL
, CHECKDATE DATE
, TITLE     VARCHAR2(50)    NOT NULL
, ROADADDR  VARCHAR2(100)   NOT NULL
, DONG_NO   NUMBER          NOT NULL
, WIDO      VARCHAR2(30)
, GYEONGDO  VARCHAR2(30)
, CONSTRAINT CHECKLIST_NO_PK PRIMARY KEY(CHECK_NO)
, CONSTRAINT CHECKLIST_ACNO_FK FOREIGN KEY(AC_NO)
            REFERENCES ACCOUNT(AC_NO)
, CONSTRAINT CHECKLIST_RESNO_FK FOREIGN KEY(RES_NO)
            REFERENCES RESIDENCE(RES_NO)
, CONSTRAINT CHECKLIST_DONGNO_FK FOREIGN KEY(DONG_NO)
            REFERENCES DONG(DONG_NO)
);

ALTER TABLE CHECKLIST MODIFY WIDO VARCHAR2(50);
ALTER TABLE CHECKLIST MODIFY GYEONGDO VARCHAR2(50);

COMMIT;


--3순위
-- 18. 신고(체크리스트) 테이블
CREATE TABLE REPORT_CHECK
( RPCHECK_NO    NUMBER
, REPORTDATE    DATE
, CHECK_NO      NUMBER
, AC_NO         NUMBER        
, WHY_NO        NUMBER     
, WHY           VARCHAR2(500)
, STATUS_NO     NUMBER
, CONSTRAINT RPCHECK_NO_PK  PRIMARY KEY(RPCHECK_NO)
, CONSTRAINT RPCHECK_NO_FK    FOREIGN KEY(CHECK_NO)
                REFERENCES CHECKLIST(CHECK_NO)
, CONSTRAINT RPCHECK_AC_NO_FK   FOREIGN KEY(AC_NO)
                REFERENCES ACCOUNT(AC_NO)
, CONSTRAINT RPCHECK_WHY_NO_FK  FOREIGN KEY(WHY_NO)
                REFERENCES REPORT_WHY(WHY_NO)
, CONSTRAINT RPCHECK_STATUS_NO_FK   FOREIGN KEY(STATUS_NO)
                REFERENCES REPORT_STATUS(STATUS_NO)
);

ALTER TABLE REPORT_CHECK ADD AD_ID VARCHAR2(30);
ALTER TABLE REPORT_CHECK ADD CONFIRMDATE DATE;

SELECT * FROM REPORT_CHECK;

ALTER TABLE REPORT_CHECK ADD CONSTRAINT RPCHECK_AD_ID_FK FOREIGN KEY(AD_ID) REFERENCES ADMIN(AD_ID);

-- 19. 코멘트
CREATE TABLE CONTENT
( CHECK_NO NUMBER
, GOOD VARCHAR2(300)
, BAD VARCHAR2(300)
, ETC VARCHAR2(300)
,CONSTRAINT CONTENT_CHECK_NO_PK PRIMARY KEY(CHECK_NO)
,CONSTRAINT CONTENT_CHECK_NO_FK FOREIGN KEY(CHECK_NO)
REFERENCES CHECKLIST (CHECK_NO)
);

-- 20. 비밀코멘트 (3순위)
CREATE TABLE SECRET_CONTENT
( CHECK_NO NUMBER
, COMMENTS VARCHAR2(300)
,CONSTRAINT SECRET_CONTENT_CHECK_NO_PK PRIMARY KEY(CHECK_NO)
,CONSTRAINT SECRET_CONTENT_CHECK_NO_FK FOREIGN KEY(CHECK_NO)
REFERENCES CHECKLIST (CHECK_NO)
);

-- 21. 생활편의시설 (3순위)
CREATE TABLE CONVENIENCE
( CHECK_NO NUMBER
, MART NUMBER(1)
, LAUNDRY NUMBER(1)
, HOSPITAL NUMBER(1)
, FOOD NUMBER(1)
, CULTURE NUMBER(1)
, PARK NUMBER(1)
, COMMENTS VARCHAR2(300)
,CONSTRAINT CONVENIENCE_CHECK_NO_PK PRIMARY KEY(CHECK_NO)
,CONSTRAINT CONVENIENCE_CHECK_NO_FK FOREIGN KEY(CHECK_NO)
REFERENCES CHECKLIST (CHECK_NO)
);

ALTER TABLE CONVENIENCE MODIFY MART CONSTRAINT CONVENIENCE_MART_NN NOT NULL;
ALTER TABLE CONVENIENCE MODIFY LAUNDRY CONSTRAINT CONVENIENCE_LAUNDRY_NN NOT NULL;
ALTER TABLE CONVENIENCE MODIFY HOSPITAL CONSTRAINT CONVENIENCE_HOSPITAL_NN NOT NULL;
ALTER TABLE CONVENIENCE MODIFY FOOD CONSTRAINT CONVENIENCE_FOOD_NN NOT NULL;
ALTER TABLE CONVENIENCE MODIFY CULTURE CONSTRAINT CONVENIENCE_CULTURE_NN NOT NULL;
ALTER TABLE CONVENIENCE MODIFY PARK CONSTRAINT CONVENIENCE_PARK_NN NOT NULL;

-- 22. 추가항목(시간 평가) (3순위)
CREATE TABLE PLUS_TIME
( PTIME_NO NUMBER
, CHECK_NO NUMBER
, TITLE VARCHAR2(20)
, COMMENTS VARCHAR2(300)
, TIME NUMBER(3)
,CONSTRAINT PLUS_TIME_PTIME_NO_PK PRIMARY KEY(PTIME_NO)
,CONSTRAINT PLUS_TIME_CHECK_NO_FK FOREIGN KEY(CHECK_NO)
REFERENCES CHECKLIST (CHECK_NO)
);

ALTER TABLE PLUS_TIME MODIFY(TITLE VARCHAR2(50));

-- 23. 추가항목(점수 평가) (3순위)
CREATE TABLE PLUS_SCORE
( PSCORE_NO NUMBER
, CHECK_NO NUMBER
, TITLE VARCHAR2(20)
, COMMENTS VARCHAR2(300)
, SCORENO NUMBER
,CONSTRAINT PLUS_SCORE_PSCORE_NO_PK PRIMARY KEY(PSCORE_NO)
,CONSTRAINT PLUS_SCORE_CHECK_NO_FK FOREIGN KEY(CHECK_NO)
REFERENCES CHECKLIST (CHECK_NO)
);

ALTER TABLE PLUS_TIME MODIFY(TITLE VARCHAR2(50));

ALTER TABLE PLUS_SCORE ADD CONSTRAINT PLUS_SCORE_SCORENO_FK FOREIGN KEY(SCORENO) REFERENCES SCORE(SCORENO);

-- 24. 교통혼잡도 (3순위)
CREATE TABLE HONJAP
( CHECK_NO NUMBER
, COMMENTS VARCHAR2(300)
, SCORENO NUMBER
,CONSTRAINT HONJAP_CHECK_NO_PK PRIMARY KEY(CHECK_NO)
,CONSTRAINT HONJAP_CHECK_NO_FK FOREIGN KEY(CHECK_NO)
REFERENCES CHECKLIST (CHECK_NO)
);

-- 25. 대중교통 (3순위)
CREATE TABLE TRANSPORT
( CHECK_NO NUMBER
, COMMENTS VARCHAR2(300)
, SCORENO NUMBER NOT NULL
,CONSTRAINT TRANSPORT_CHECK_NO_PK PRIMARY KEY(CHECK_NO)
,CONSTRAINT TRANSPORT_CHECK_NO_FK FOREIGN KEY(CHECK_NO)
REFERENCES CHECKLIST (CHECK_NO)
);

-- 26. 치안
CREATE TABLE SECURITY
( CHECK_NO      NUMBER          NOT NULL
, COMMENTS       VARCHAR2(300)
, SCORENO       NUMBER          NOT NULL
, CONSTRAINT SECURITY_CHECK_NO_PK PRIMARY KEY(CHECK_NO)
, CONSTRAINT SECURITY_CHECK_NO_FK FOREIGN KEY(CHECK_NO)
             REFERENCES CHECKLIST(CHECK_NO)
, CONSTRAINT SECURITY_SCORENO_FK FOREIGN KEY(SCORENO)
             REFERENCES SCORE(SCORENO)
);

-- 27. 월세
CREATE TABLE WOLSE          -- 월세 (3순위)
( CHECK_NO      NUMBER  NOT NULL
, MWOLSE        NUMBER
, DEPOSIT       NUMBER
, CONSTRAINT WOLSE_CHECKNO_PK PRIMARY KEY(CHECK_NO)
, CONSTRAINT WOLSE_CHECKNO_FK FOREIGN KEY(CHECK_NO)
            REFERENCES CHECKLIST(CHECK_NO)
);

-- 28. 전세
CREATE TABLE JEONSE         -- 전세 (3순위)
( CHECK_NO      NUMBER  NOT NULL
, MJEONSE       NUMBER
, CONSTRAINT JEONSE_CHECKNO_PK PRIMARY KEY(CHECK_NO)
, CONSTRAINT JEONSE_CHECKNO_FK FOREIGN KEY(CHECK_NO)
            REFERENCES CHECKLIST(CHECK_NO)
);

-- 29. 매매
CREATE TABLE MAEMAE         -- 매매 (3순위)
( CHECK_NO      NUMBER  NOT NULL
, MMAEMAE       NUMBER
, CONSTRAINT MAEMAE_CHECKNO_PK PRIMARY KEY(CHECK_NO)
, CONSTRAINT MAEMAE_CHECKNO_FK FOREIGN KEY(CHECK_NO)
            REFERENCES CHECKLIST(CHECK_NO)
);

-- 30. 나의 출근시간
CREATE TABLE GOING          -- 나의 출근시간 (3순위)
( CHECK_NO      NUMBER  NOT NULL
, PLACE         VARCHAR2(30)
, TIME          NUMBER(3)
, CONSTRAINT GOING_CHECKNO_PK PRIMARY KEY(CHECK_NO)
, CONSTRAINT GOING_CHECKNO_FK FOREIGN KEY(CHECK_NO)
            REFERENCES CHECKLIST(CHECK_NO)
);

-- 31. 반려동물
CREATE TABLE PET            -- 반려동물 (3순위)
( CHECK_NO      NUMBER  NOT NULL
, COMMENTS      VARCHAR2(300)
, SCORENO       NUMBER  NOT NULL
, CONSTRAINT PET_CHECKNO_PK PRIMARY KEY(CHECK_NO)
, CONSTRAINT PET_CHECKNO_FK FOREIGN KEY(CHECK_NO)
            REFERENCES CHECKLIST(CHECK_NO)
, CONSTRAINT PET_SCORENO_FK FOREIGN KEY(SCORENO)
            REFERENCES SCORE(SCORENO)
);


--4순위
-- 32. 북마크 스티커
CREATE TABLE CHECKSTICKER
( CSTICKER_NO   NUMBER
, AC_NO         NUMBER          NOT NULL
, CONTENT       VARCHAR2(30)
, CONSTRAINT CHECKSTICKER_NO_PK PRIMARY KEY(CSTICKER_NO)
, CONSTRAINT CHECKSTICKER_AC_NO_FK FOREIGN KEY(AC_NO)
REFERENCES ACCOUNT(AC_NO)
);

-- 33. 북마크 지역정보
CREATE TABLE LOCAL_BOOKMARK
( LO_B_NO   NUMBER
, DONG_NO   NUMBER  NOT NULL
, AC_NO     NUMBER  NOT NULL
, MARKDATE  DATE    NOT NULL
, CONSTRAINT LOCALMARK_LO_B_NO_PK PRIMARY KEY(LO_B_NO)
, CONSTRAINT LOCALMARK_DONG_NO_FK FOREIGN KEY(DONG_NO)
REFERENCES DONG(DONG_NO)
, CONSTRAINT LOCALMARK_AC_NO_FK FOREIGN KEY(AC_NO)
REFERENCES ACCOUNT(AC_NO)
, CONSTRAINT LOCALMARK_DONGAC_UK UNIQUE(DONG_NO, AC_NO)
);

-- 34. 북마크 체크리스트
CREATE TABLE CHECK_BOOKMARK
( CH_B_NO   NUMBER
, CHECK_NO  NUMBER          NOT NULL
, TITLE     VARCHAR2(30)
, AC_NO     NUMBER          NOT NULL
, MARKDATE  DATE            NOT NULL
, CONSTRAINT CBOOKMARK_CH_B_NO_FK PRIMARY KEY(CH_B_NO)
, CONSTRAINT CBOOKMARK_AC_NO_FK FOREIGN KEY(AC_NO)
REFERENCES ACCOUNT(AC_NO)
, CONSTRAINT CBOOKMARK_CHECK_NO_FK FOREIGN KEY(CHECK_NO)
REFERENCES CHECKLIST(CHECK_NO)
, CONSTRAINT CBOOKMARK_CHECKAC_UK UNIQUE(CHECK_NO, AC_NO)
);

--5순위
-- 35. 지역정보 부착 스티커
CREATE TABLE LOCALTAG
( LO_TAG_NO NUMBER
, LO_B_NO   NUMBER  NOT NULL
, STIKER_NO NUMBER  NOT NULL
, CONSTRAINT LOCALTAG_LO_TAG_NO_PK PRIMARY KEY(LO_TAG_NO)
, CONSTRAINT LOCALTAG_LO_B_NO_FK FOREIGN KEY(LO_B_NO)
            REFERENCES LOCAL_BOOKMARK(LO_B_NO)
);

ALTER TABLE LOCALTAG RENAME COLUMN STIKER_NO TO CSTICKER_NO;

-- 36. 체크리스트 부착 스티커
CREATE TABLE CHECKTAG
( CH_TAG_NO     NUMBER
, CH_B_NO       NUMBER  NOT NULL
, CSTICKER_NO   NUMBER  NOT NULL
, CONSTRAINT CHECKTAG_NO_PK PRIMARY KEY(CH_TAG_NO)
, CONSTRAINT CHECKTAG_CH_B_NO_FK FOREIGN KEY(CH_B_NO)
REFERENCES CHECK_BOOKMARK(CH_B_NO)
, CONSTRAINT CHECKTAG_STICKER_NO_FK FOREIGN KEY(CSTICKER_NO)
REFERENCES CHECKSTICKER(CSTICKER_NO)
);

-- 37 내 체크리스트 부착 스티커
CREATE TABLE MYCHECKTAG
( MC_TAG_NO     NUMBER
, CHECK_NO      NUMBER  NOT NULL
, CSTICKER_NO   NUMBER  NOT NULL
, CONSTRAINT    MYCHECKTAG_NO_PK    PRIMARY KEY(MC_TAG_NO)
, CONSTRAINT    MYCHECKTAG_CHECKNO_FK   FOREIGN KEY(CHECK_NO)
                REFERENCES CHECKLIST(CHECK_NO)
, CONSTRAINT    MYCHECKTAG_STICKER_NO_FK    FOREIGN KEY(CSTICKER_NO)
                REFERENCES STICKER(CSTICKER_NO)
);

SELECT * FROM MYCHECKTAG;
COMMIT;

--------------------------------------------------------------------------------------------------------------------------

-- 공동구매 DB설계

-- ■■■1순위■■■

--테이블명
CREATE TABLE OBJECTION_STATE (
   OBJSTAT_NO   NUMBER   NOT NULL,
   STATENAME   DATE   NULL,
   AD_ID   VARCHAR2(30)   NOT NULL
);

ALTER TABLE OBJECTION_STATE ADD CONSTRAINT PK_OBJECTION_STATE PRIMARY KEY (
   OBJSTAT_NO
);

--테이블명
CREATE TABLE OBJECTIONWHY (
   OBJWHY_NO   NUMBER   NOT NULL,
   WHY   VARCHAR2(300)   NULL
);

ALTER TABLE OBJECTIONWHY ADD CONSTRAINT PK_OBJECTIONWHY PRIMARY KEY (
   OBJWHY_NO
);


--테이블명
CREATE TABLE MANNERSTICKER (
   MSTICKER_NO   NUMBER   NOT NULL,
   NAME   VARCHAR2(30)   NULL
);

ALTER TABLE MANNERSTICKER ADD CONSTRAINT PK_MANNERSTICKER PRIMARY KEY (
   MSTICKER_NO
);

--테이블명
CREATE TABLE REVIEWGRADE (
   REGRADE_NO   NUMBER   NOT NULL,
   NAME   VARCHAR2(30)   NULL
);

ALTER TABLE REVIEWGRADE ADD CONSTRAINT PK_REVIEWGRADE PRIMARY KEY (
   REGRADE_NO
);

--테이블명
CREATE TABLE REFUNDWHY (
   REFUNDWHY_NO   NUMBER   NOT NULL,
   WHY   VARCHAR2(20)   NULL
);

ALTER TABLE REFUNDWHY ADD CONSTRAINT PK_REFUNDWHY PRIMARY KEY (
   REFUNDWHY_NO
);

--테이블명
CREATE TABLE EXPRESS_BUYER (
   EXBUYER_NO   NUMBER   NOT NULL,
   EXPRESS   VARCHAR2(20)   NULL
);

ALTER TABLE EXPRESS_BUYER ADD CONSTRAINT PK_EXPRESS_BUYER PRIMARY KEY (
   EXBUYER_NO
);

--테이블명
CREATE TABLE EXPRESS_SELLER (
   EXSELLER_NO   NUMBER   NOT NULL,
   EXPRESS   VARCHAR2(20)   NULL
);

ALTER TABLE EXPRESS_SELLER ADD CONSTRAINT PK_EXPRESS_SELLER PRIMARY KEY (
   EXSELLER_NO
);

--테이블명
CREATE TABLE GUIN_STATUSTYPE (
   GST_NO   NUMBER   NOT NULL,
   STATUSTYPE   VARCHAR2(20)   NULL
);

ALTER TABLE GUIN_STATUSTYPE ADD CONSTRAINT PK_GUIN_STATUSTYPE PRIMARY KEY (
   GST_NO
);

--테이블명
CREATE TABLE MENU (
   MENU_NO   NUMBER   NOT NULL,
   MENUNAME   VARCHAR2(20)   NULL
);

ALTER TABLE MENU ADD CONSTRAINT PK_MENU PRIMARY KEY (
   MENU_NO
);

--테이블명
CREATE TABLE GUIN_MEMBER (
   GUMEM_NO   NUMBER   NOT NULL,
   MEMBERNAME   VARCHAR2(10)   NULL
);

ALTER TABLE GUIN_MEMBER ADD CONSTRAINT PK_GUIN_MEMBER PRIMARY KEY (
   GUMEM_NO
);

--테이블명
CREATE TABLE GRADE (
   GRADE_NO   NUMBER   NOT NULL,
   NAME   VARCHAR2(20)   NULL,
   SCORE   NUMBER(2)   NULL
);

ALTER TABLE GRADE ADD CONSTRAINT PK_GRADE PRIMARY KEY (
   GRADE_NO
);

--테이블명
CREATE TABLE INGPERIOD (
   PERIOD_NO   NUMBER   NOT NULL,
   PERIODNAME   VARCHAR2(10)   NULL,
   PERIOD   NUMBER(3)   NULL
);

ALTER TABLE INGPERIOD ADD CONSTRAINT PK_INGPERIOD PRIMARY KEY (
   PERIOD_NO
);


--■■■2순위■■■
--테이블명
CREATE TABLE GUIN (
   GUIN_NO   NUMBER   NOT NULL,
   AC_NO   NUMBER   NOT NULL,
   MENU_NO   NUMBER   NOT NULL,
   SHOP   VARCHAR2(30)   NULL,
   FOOD   VARCHAR2(30)   NULL,
   PRICE   NUMBER   NULL,
   DELIVERY   NUMBER   NULL,
   PERIOD   NUMBER   NULL,
   ROADADDR   VARCHAR2(50)   NULL,
   DETAILADDR   VARCHAR2(100)   NULL,
   GRADE_NO   NUMBER   NOT NULL,
   COMMENTS   VARCHAR(500)   NOT NULL,
   GUMEM_NO   NUMBER   NOT NULL
);

ALTER TABLE GUIN ADD CONSTRAINT PK_GUIN PRIMARY KEY (
   GUIN_NO
);



--■■■3순위■■■
--테이블명
CREATE TABLE PAY (
   PAY_NO   NUMBER   NOT NULL,
   PAYNUMBER   VARCHAR2(30)   NULL,
   PAYMONEY   NUMBER   NULL,
   PAYDATE   DATE   NULL,
   GUIN_NO   NUMBER   NOT NULL
);

ALTER TABLE PAY ADD CONSTRAINT PK_PAY PRIMARY KEY (
   PAY_NO
);

--테이블명
CREATE TABLE GUIN_STATUS (
   GUINSTATUS_NO   NUMBER   NOT NULL,
   GUIN_NO   NUMBER   NOT NULL,
   GST_NO   NUMBER   NOT NULL,
   STDATE   DATE   NULL
);

ALTER TABLE GUIN_STATUS ADD CONSTRAINT PK_GUIN_STATUS PRIMARY KEY (
   GUINSTATUS_NO
);

--테이블명
CREATE TABLE ING (
   GUIN_NO   NUMBER   NOT NULL,
   ARRIVE   NUMBER   NULL,
   PHOTO   VARCHAR2(500)   NULL,
   PAYMENTTIME   DATE   NULL
);

ALTER TABLE ING ADD CONSTRAINT PK_ING PRIMARY KEY (
   GUIN_NO
);

--테이블명
CREATE TABLE GUIN_REPLY (
   GUIN_REPLY_NO   NUMBER   NOT NULL,
   AC_NO   NUMBER   NOT NULL,
   GUIN_NO   NUMBER   NOT NULL,
   REPLYDATE   DATE   NULL,
   REPLY   VARCHAR(500)   NULL,
   REREPLY_NO   NUMBER   NOT NULL
);

ALTER TABLE GUIN_REPLY ADD CONSTRAINT PK_GUIN_REPLY PRIMARY KEY (
   GUIN_REPLY_NO
);

--테이블명
CREATE TABLE REPORT_GUIN (
   RPGU_NO   NUMBER   NOT NULL,
   REPORTDATE   DATE   NULL,
   GUIN_NO   NUMBER   NOT NULL,
   AC_NO   NUMBER   NOT NULL,
   REASON_NO   NUMBER   NOT NULL,
   WHY   VARCHAR2(500)   NULL,
   STATUS_NO   NUMBER   NOT NULL
);

ALTER TABLE REPORT_GUIN ADD CONSTRAINT PK_REPORT_GUIN PRIMARY KEY (
   RPGU_NO
);


--■■■4순위■■■
--테이블명
CREATE TABLE REFUND (
   REFUND_NO   NUMBER   NOT NULL,
   REFUNDDATE   DATE   NULL,
   PAY_NO   NUMBER   NOT NULL,
   REASON_NO   NUMBER   NOT NULL
);

ALTER TABLE REFUND ADD CONSTRAINT PK_REFUND PRIMARY KEY (
   REFUND_NO
);

--테이블명
CREATE TABLE BUYER (
   BUYER_NO   NUMBER   NOT NULL,
   GUIN_NO   NUMBER   NOT NULL,
   AC_NO   NUMBER   NOT NULL,
   BUYERDATE   DATE   NOT NULL,
   PAY_NO   NUMBER   NOT NULL
);

ALTER TABLE BUYER ADD CONSTRAINT PK_BUYER PRIMARY KEY (
   BUYER_NO
);

--테이블명  
--GUIN_REPLY 테이블 참조댓글 고유번호 외래키 지정
ALTER TABLE GUIN_REPLY ADD CONSTRAINT FK_REREPLY_NO FOREIGN KEY(REREPLY_NO)
       REFERENCES GUIN_REPLY(GUIN_REPLY_NO);



--테이블명
CREATE TABLE REPORT_GUINREPLY (
   RPGUREPLY_NO   NUMBER   NOT NULL,
   REPORTDATE   DATE   NULL,
   REPLY_NO   NUMBER   NOT NULL,
   AC_NO   NUMBER   NOT NULL,
   REASON_NO   NUMBER   NOT NULL,
   WHY   VARCHAR2(500)   NULL,
   STATUS_NO   NUMBER   NOT NULL
);

ALTER TABLE REPORT_GUINREPLY ADD CONSTRAINT PK_REPORT_GUINREPLY PRIMARY KEY (
   RPGUREPLY_NO
);



--■■■5순위■■■
--테이블명
CREATE TABLE OBJECTION (
   OBJECTION_NO   NUMBER   NOT NULL,
   BUYER_NO   NUMBER   NOT NULL,
   OBJSTAT_NO   NUMBER   NOT NULL,
   OBJTYPE_NO   NUMBER   NOT NULL,
   WHY   VARCHAR2(300)   NULL,
   PHOTO   VARCHAR2(500)   NULL,
   SINDATE   DATE   NULL
);

ALTER TABLE OBJECTION ADD CONSTRAINT PK_OBJECTION PRIMARY KEY (
   OBJECTION_NO
);

--테이블명
CREATE TABLE REVIEW (
   REVIEW_NO   NUMBER   NOT NULL,
   REGRADE_NO   NUMBER   NOT NULL,
   BUYER_NO   NUMBER   NOT NULL,
   REVIEWDATE   DATE   NULL,
   COMMENTS   VARCHAR2(300)   NULL
);

ALTER TABLE REVIEW ADD CONSTRAINT PK_REVIEW PRIMARY KEY (
   REVIEW_NO
);

--테이블명
CREATE TABLE BUYER_ACTION (
   BUYACT_NO   NUMBER   NOT NULL,
   BUYER_NO   NUMBER   NOT NULL,
   EXBUYER_NO   NUMBER   NOT NULL,
   ACTDATE   DATE   NULL
);

ALTER TABLE BUYER_ACTION ADD CONSTRAINT PK_BUYER_ACTION PRIMARY KEY (
   BUYACT_NO
);

--테이블명
CREATE TABLE SELLER_ACTION (
   SELACT_NO   NUMBER   NOT NULL,
   BUYER_NO   NUMBER   NOT NULL,
   EXSELLER_NO   NUMBER   NOT NULL,
   ACTDATE   DATE   NULL
);

ALTER TABLE SELLER_ACTION ADD CONSTRAINT PK_SELLER_ACTION PRIMARY KEY (
   SELACT_NO
);

--테이블명
CREATE TABLE ING_REPLY (
   ING_REPLY_NO   NUMBER   NOT NULL,
   BUYER_NO   NUMBER   NOT NULL,
   REPLYDATE   DATE   NULL,
   REPLY   VARCHAR(500)   NULL,
   REREPLY_NO   NUMBER   NOT NULL
);


ALTER TABLE ING_REPLY ADD CONSTRAINT PK_ING_REPLY PRIMARY KEY (
   ING_REPLY_NO
);



--■■■6순위■■■

--테이블명 
CREATE TABLE REVIEWDETAIL (
   REDETAIL_NO   NUMBER   NOT NULL,
   REVIEW_NO   NUMBER   NOT NULL,
   MSTICKER_NO   NUMBER   NOT NULL
);

ALTER TABLE REVIEWDETAIL ADD CONSTRAINT PK_REVIEWDETAIL PRIMARY KEY (
   REDETAIL_NO
);

--테이블명
ALTER TABLE ING_REPLY ADD CONSTRAINT FK_RERE_NO FOREIGN KEY(REREPLY_NO)
       REFERENCES ING_REPLY(ING_REPLY_NO);


--테이블명
CREATE TABLE REPORT_ING (
   REPORT_NO   NUMBER   NOT NULL,
   REPORTDATE   DATE   NULL,
   REPLY_NO   NUMBER   NOT NULL,
   AC_NO   NUMBER   NOT NULL,
   REASON_NO   NUMBER   NOT NULL,
   WHY   VARCHAR2(500)   NULL,
   STATUS_NO   NUMBER   NOT NULL
);

ALTER TABLE REPORT_ING ADD CONSTRAINT PK_REPORT_ING PRIMARY KEY (
   REPORT_NO
);

-- 테이블 명 바꾸기
ALTER TABLE CHECKSTICKER RENAME TO STICKER;

SELECT *
FROM STICKER;


---------------------------------------------------------------------------------------------------------------
-- 제약조건 조회 뷰 생성
CREATE OR REPLACE VIEW VIEW_CONSTCHECK
AS
SELECT UC.OWNER "OWNER"
    , UC.CONSTRAINT_NAME "CONSTRAINT_NAME"
    , UC.TABLE_NAME "TABLE_NAME"
    , UC.CONSTRAINT_TYPE "CONSTRAINT_TYPE"
    , UCC.COLUMN_NAME "COLUMN_NAME"
    , UC.SEARCH_CONDITION "SEARCH_CONDITION"
    , UC.DELETE_RULE "DELETE_RULE"
FROM USER_CONSTRAINTS UC JOIN USER_CONS_COLUMNS UCC
ON UC.CONSTRAINT_NAME = UCC.CONSTRAINT_NAME;

SELECT *
FROM VIEW_CONSTCHECK;


--------------------------------------------------------------------------------------------------------------

-- 제약조건 수정(CASCADE 추가 : 북마크스티커 고유번호, 북마크 고유번호)
-- 체크리스트 부착 스티커의 기존 제약조건 삭제
/*
TEAM_SEOLO	CHECKTAG_STICKER_NO_FK	CHECKTAG	R	CSTICKER_NO		NO ACTION
TEAM_SEOLO	CHECKTAG_CH_B_NO_FK	    CHECKTAG	R	CH_B_NO		    NO ACTION
*/
ALTER TABLE CHECKTAG DROP CONSTRAINT CHECKTAG_STICKER_NO_FK;
ALTER TABLE CHECKTAG DROP CONSTRAINT CHECKTAG_CH_B_NO_FK;

-- 체크리스트 부착 스티커의 컬럼에 CASCADE 제약조건 추가
ALTER TABLE CHECKTAG ADD CONSTRAINT CHECKTAG_STICKER_NO_FK FOREIGN KEY(CSTICKER_NO)
REFERENCES STICKER(CSTICKER_NO) ON DELETE CASCADE;

ALTER TABLE CHECKTAG ADD CONSTRAINT CHECKTAG_CH_B_NO_FK FOREIGN KEY(CH_B_NO)
REFERENCES CHECK_BOOKMARK(CH_B_NO) ON DELETE CASCADE;
/*
TEAM_SEOLO	CHECKTAG_STICKER_NO_FK	CHECKTAG	R	CSTICKER_NO		CASCADE
TEAM_SEOLO	CHECKTAG_CH_B_NO_FK	    CHECKTAG	R	CH_B_NO		    CASCADE
*/

-- 지역정보 부착 스티커의 기존 제약조건 삭제
/*
TEAM_SEOLO	LOCALTAG_LO_B_NO_FK	LOCALTAG	R	LO_B_NO		NO ACTION
STICKER_NO 컬럼은 제약조건 없당...
*/
ALTER TABLE LOCALTAG DROP CONSTRAINT LOCALTAG_LO_B_NO_FK;

-- 지역정보 부착 스티커의 컬럼에 CASCADE 제약조건 추가
ALTER TABLE LOCALTAG ADD CONSTRAINT LOCALTAG_LO_B_NO_FK FOREIGN KEY(LO_B_NO)
REFERENCES LOCAL_BOOKMARK(LO_B_NO) ON DELETE CASCADE;

ALTER TABLE LOCALTAG ADD CONSTRAINT LOCALTAG_STICKER_NO_FK FOREIGN KEY(CSTICKER_NO)
REFERENCES STICKER(CSTICKER_NO) ON DELETE CASCADE;
/*
TEAM_SEOLO	LOCALTAG_STICKER_NO_FK	LOCALTAG	R	CSTICKER_NO		CASCADE
TEAM_SEOLO	LOCALTAG_LO_B_NO_FK	    LOCALTAG	R	LO_B_NO		    CASCADE
*/



-- 추가항목(시간평가), 추가항목(점수평가) 테이블의 체크리스트 고유번호 컬럼에도 CASCADE 조건 추가
/*
TEAM_SEOLO	PLUS_TIME_CHECK_NO_FK	PLUS_TIME	R	CHECK_NO		NO ACTION
TEAM_SEOLO	PLUS_SCORE_CHECK_NO_FK	PLUS_SCORE	R	CHECK_NO		NO ACTION	
*/
-- 기존 제약조건 삭제
ALTER TABLE PLUS_TIME DROP CONSTRAINT PLUS_TIME_CHECK_NO_FK;
ALTER TABLE PLUS_SCORE DROP CONSTRAINT PLUS_SCORE_CHECK_NO_FK;

-- CASCADE 제약조건 추가
ALTER TABLE PLUS_TIME ADD CONSTRAINT PLUS_TIME_CHECK_NO_FK FOREIGN KEY(CHECK_NO)
REFERENCES CHECKLIST(CHECK_NO) ON DELETE CASCADE;

ALTER TABLE PLUS_SCORE ADD CONSTRAINT PLUS_SCORE_CHECK_NO_FK FOREIGN KEY(CHECK_NO)
REFERENCES CHECKLIST(CHECK_NO) ON DELETE CASCADE;

/*
TEAM_SEOLO	PLUS_TIME_CHECK_NO_FK	PLUS_TIME	R	CHECK_NO		CASCADE
TEAM_SEOLO	PLUS_SCORE_CHECK_NO_FK	PLUS_SCORE	R	CHECK_NO		CASCADE
*/





--○ 공동구매쪽 신고 테이블들에 컬럼 추가했어요!!

-- 신고(공동구매 게시글) 테이블에 관리자 아이디와 처리일시 컬럼 추가, 제약조건 추가
ALTER TABLE REPORT_GUIN
ADD AD_ID VARCHAR2(30);

ALTER TABLE REPORT_GUIN
ADD CONFIRMDATE DATE;

ALTER TABLE REPORT_GUIN
ADD CONSTRAINT RPGUIN_AD_ID_FK FOREIGN KEY(AD_ID)
        REFERENCES ADMIN(AD_ID);
        
SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'REPORT_GUIN';

-- 신고(공동구매 구인 댓글) 테이블에 관리자 아이디와 처리일시 컬럼 추가, 제약조건 추가
ALTER TABLE REPORT_GUINREPLY
ADD AD_ID VARCHAR2(30);

ALTER TABLE REPORT_GUINREPLY
ADD CONFIRMDATE DATE;

ALTER TABLE REPORT_GUINREPLY
ADD CONSTRAINT RPGUINRE_AD_ID_FK FOREIGN KEY(AD_ID)
        REFERENCES ADMIN(AD_ID);
        
SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'REPORT_GUINREPLY';

        
-- 신고(공동구매 진행 댓글) 테이블에 관리자 아이디와 처리일시 컬럼 추가, 제약조건 추가
ALTER TABLE REPORT_ING
ADD AD_ID VARCHAR2(30);

ALTER TABLE REPORT_ING
ADD CONFIRMDATE DATE;

ALTER TABLE REPORT_ING
ADD CONSTRAINT RPING_AD_ID_FK FOREIGN KEY(AD_ID)
        REFERENCES ADMIN(AD_ID);
        
--------------------------------------------------------------------------------

-- 뷰
        
--○ 진하 : 신고 뷰 (이용자와 관리자가 신고 내역 볼 수 있도록)
CREATE OR REPLACE VIEW VIEW_REPORT
AS
SELECT ROWNUM AS RNUM, TITLE, STATUSNAME, REPORTDATE, REPORTER, WRITER, RPCHECK_NO, WHY
FROM
(
    SELECT W.TITLE AS TITLE, S.STATUSNAME AS STATUSNAME, R.REPORTDATE AS REPORTDATE
    , R.AC_NO AS REPORTER, C.AC_NO AS WRITER, R.RPCHECK_NO AS RPCHECK_NO, R.WHY AS WHY
    FROM REPORT_CHECK R, REPORT_WHY W, REPORT_STATUS S, CHECKLIST C
    WHERE R.WHY_NO = W.WHY_NO(+)
      AND R.STATUS_NO = S.STATUS_NO(+)
      AND R.CHECK_NO = C.CHECK_NO(+)
);
--==>> View VIEW_REPORT이(가) 생성되었습니다.
-- 뷰 순서 : 신고사유, 상태, 신고일시, 신고자(REPORTER), 원글작성자(WRITER), 신고고유번호, 상세사유

-- 신고 내역에서 확인하는 컬럼 : 순번 유형 사유 상태 날짜 시간 
-- 위에서 겹치는 거 제외하고 팝업창에서 확인하는 컬럼 : 신고자 원글작성자 신고고유번호 상세사유

-- 신고당한 곳 주소는 나중에 추가하기로 해서 안 넣었고,
-- 유형을 정하려면 어떤 신고 테이블에 의한 신고인지를 확인해야 하는데, 
-- 일단 체크리스트에 대해서만 신고를 만드는 거라서 
-- 유형에 대해서도 스킵했어

-- 커밋을 하기위한 주석 추가..



--○ 다영 : 지역정보 평균 계산 뷰
-- 확인해야 할 내용 : 구이름, 동이름, 평균월세, 평균월세보증금, 평균전세, 평균매매
--                  , 평균치안점수, 평균대중교통점수, 평균교통혼잡도점수, 평균생활편의시설점수, 평균반려동물점수
-- SELECT "구이름", "동이름", 
--        "평균월세", "평균월세보증금"
--      , "평균전세", "평균매매"
--      , "평균치안점수", "평균대중교통점수"
--      , "평균교통혼잡도점수" 
--      , "평균생활편의시설점수", 
--      , "평균반려동물점수"
-- SUM(컬럼명) / COUNT(*.CHECK_NO) = 
-- 컬럼 총합 / 각 테이블(월세,전세, 매매...)의 체크리스트 고유번호 총 개수 = 각 컬럼의 평균값
-- (+) 컬럼 별명 영문으로 수정

--○ 지역정보 평균 계산 뷰 조회
SELECT *
FROM LOCALINFOVIEW;

SELECT *
FROM LOCALINFOVIEW
WHERE DONGNO=1111011900;

--○ 지역정보 평균 계산 뷰 수정본
--○ COUNT(컬럼명)을 사용하면 NULL 값은 제외하고 COUNT 합니다. COUNT(*)를 사용하면 NULL도 포함하여 전부 COUNT 합니다.
--   하지만, 빈 문자열은 COUNT() 결과에 포함됩니다. 
--   빈 문자열을 COUNT() 결과에서 빼려면 빈 문자열을 NULL로 바꾸고 COUNT()를 하면 됩니다.

CREATE OR REPLACE VIEW LOCALINFOVIEW
AS
SELECT G.GU_NO "GUNO", D.DONG_NO "DONGNO", G.GUNAME "GUNAME", D.DONGNAME "DONGNAME"
       , (SUM(W.MWOLSE)/COUNT(W.CHECK_NO)) "WOLSEAVG", (SUM(W.DEPOSIT)/COUNT(W.CHECK_NO)) "WOLSEDEPOSITAVG"
       , (SUM(J.MJEONSE)/COUNT(J.CHECK_NO)) "JEONSEAVG", (SUM(M.MMAEMAE)/COUNT(M.CHECK_NO)) "MAEMAEAVG"
       , (SUM(SS.SCORENAME)/COUNT(S.CHECK_NO)) "SECURITYAVG", (SUM(ST.SCORENAME)/COUNT(T.CHECK_NO)) "TRANSPORTAVG"
       , (SUM(SH.SCORENAME)/COUNT(H.CHECK_NO)) "HONJAPAVG"
       , (SUM((((CN.MART+CN.LAUNDRY+CN.HOSPITAL+CN.FOOD+CN.CULTURE+CN.PARK))/6)*5)/COUNT(CN.CHECK_NO)) "CONVENIENCEAVG"
       , (SUM(SP.SCORENAME)/COUNT(P.CHECK_NO)) "PETAVG"
FROM GU G JOIN DONG D
ON G.GU_NO = D.GU_NO
    JOIN CHECKLIST C
    ON D.DONG_NO = C.DONG_NO
        LEFT OUTER JOIN WOLSE W
        ON C.CHECK_NO = W.CHECK_NO
        LEFT OUTER JOIN JEONSE J
        ON C.CHECK_NO = J.CHECK_NO
        LEFT OUTER JOIN MAEMAE M
        ON C.CHECK_NO = M.CHECK_NO
        LEFT OUTER JOIN SECURITY S
        ON C.CHECK_NO = S.CHECK_NO
            LEFT OUTER JOIN SCORE SS
            ON S.SCORENO = SS.SCORENO
        LEFT OUTER JOIN TRANSPORT T
        ON C.CHECK_NO = T.CHECK_NO
            LEFT OUTER JOIN SCORE ST
            ON T.SCORENO = ST.SCORENO
        LEFT OUTER JOIN HONJAP H
        ON C.CHECK_NO = H.CHECK_NO
            LEFT OUTER JOIN SCORE SH
            ON H.SCORENO = SH.SCORENO
        LEFT OUTER JOIN CONVENIENCE CN
        ON C.CHECK_NO = CN.CHECK_NO
        LEFT OUTER JOIN PET P
        ON C.CHECK_NO = P.CHECK_NO
            LEFT OUTER JOIN SCORE SP
            ON P.SCORENO = SP.SCORENO
GROUP BY G.GU_NO, D.DONG_NO, G.GUNAME, D.DONGNAME;
--==>> View LOCALINFOVIEW이(가) 생성되었습니다.

SELECT * FROM LOCALINFOVIEW;

--○ 소연 : 개별 체크리스트 조회 뷰 생성
--○ 체크리스트 테스트 데이터 1
INSERT INTO CHECKLIST(CHECK_NO, AC_NO, RES_NO, CHECKDATE, TITLE, ROADADDR, DONG_NO, WIDO, GYEONGDO)
VALUES(1, 1, 1, SYSDATE, '체크리스트 시범데이터1', '서울특별시 종로구 사직로 161(세종로)', 1111011900, 37.57956788809389, 126.97702562251516);

SELECT * FROM ACCOUNT;
SELECT * FROM RESIDENCE;
SELECT * FROM DONG WHERE DONGNAME='세종로';

INSERT INTO CONTENT(CHECK_NO, GOOD, BAD, ETC) VALUES(1, '장점코멘트~~~~~~', '단점코멘트!@$@%#%@~~~', '기타코멘트@@#%ㅎㅎㅎ');
INSERT INTO SECRET_CONTENT(CHECK_NO, COMMENTS) VALUES(1, '비밀코멘트지롱');
INSERT INTO CONVENIENCE(CHECK_NO, MART, LAUNDRY, HOSPITAL, FOOD, CULTURE, PARK, COMMENTS)
VALUES(1, 1, 0, 1, 1, 0, 1, '자유롭게 코멘트 작성');

INSERT INTO WOLSE(CHECK_NO, MWOLSE, DEPOSIT) VALUES(1, 50, 1000);
INSERT INTO JEONSE(CHECK_NO, MJEONSE) VALUES(1, 14000);
INSERT INTO MAEMAE(CHECK_NO, MMAEMAE) VALUES(1, 55000);
INSERT INTO GOING(CHECK_NO, PLACE, TIME) VALUES(1, '도어투도어 회사까지', 50);
INSERT INTO PET(CHECK_NO, COMMENTS, SCORENO) VALUES(1, '코코가 좋아할듯', 9);
INSERT INTO SECURITY(CHECK_NO, COMMENTS, SCORENO) VALUES(1, '치안은 그럭저럭', 6);
INSERT INTO TRANSPORT(CHECK_NO, COMMENTS, SCORENO) VALUES(1, '버스 많이다님', 11);
INSERT INTO HONJAP(CHECK_NO, COMMENTS, SCORENO) VALUES(1, '출퇴근길에 많이 막힘', 5);
INSERT INTO PLUS_TIME(PTIME_NO, CHECK_NO, TITLE, COMMENTS, TIME) VALUES(1, 1, '세종문화회관까지', '가까워서 좋다ㅎㅎ', 10);
INSERT INTO PLUS_SCORE(PSCORE_NO, CHECK_NO, TITLE, COMMENTS, SCORENO) VALUES(1, 1, '생각안나...', '몰라ㅜㅜ 테스트', 8);

COMMIT;

--○ 체크리스트 테스트 데이터 2
INSERT INTO CHECKLIST(CHECK_NO, AC_NO, RES_NO, CHECKDATE, TITLE, ROADADDR, DONG_NO, WIDO, GYEONGDO)
VALUES(2, 1, 2, SYSDATE, '체크리스트 시범데이터2', '서울특별시 종로구 사직로 161(세종로)', 1111011900, 37.57956788809389, 126.97702562251516);

INSERT INTO CONVENIENCE(CHECK_NO, MART, LAUNDRY, HOSPITAL, FOOD, CULTURE, PARK, COMMENTS) VALUES(2, 0, 0, 0, 1, 0, 1, '자유롭게 코멘트 작성');
INSERT INTO WOLSE(CHECK_NO, MWOLSE, DEPOSIT) VALUES(2, 55, 2000);
INSERT INTO JEONSE(CHECK_NO, MJEONSE) VALUES(2, 17000);
INSERT INTO MAEMAE(CHECK_NO, MMAEMAE) VALUES(2, 53000);
INSERT INTO PET(CHECK_NO, COMMENTS, SCORENO) VALUES(2, '코코가 좋아할듯2', 8);
INSERT INTO SECURITY(CHECK_NO, COMMENTS, SCORENO) VALUES(2, '치안은 그럭저럭2', 5);
INSERT INTO TRANSPORT(CHECK_NO, COMMENTS, SCORENO) VALUES(2, '버스 많이다님2', 9);
INSERT INTO HONJAP(CHECK_NO, COMMENTS, SCORENO) VALUES(2, '출퇴근길에 많이 막힘2', 7);
INSERT INTO PLUS_TIME(PTIME_NO, CHECK_NO, TITLE, COMMENTS, TIME) VALUES(2, 2, '세종문화회관까지2', '가까워서 좋다ㅎㅎ2', 25);
INSERT INTO PLUS_TIME(PTIME_NO, CHECK_NO, TITLE, COMMENTS, TIME) VALUES(3, 2, '세종문화회관까지3', '가까워서 좋다ㅎㅎ3', 20);
INSERT INTO PLUS_SCORE(PSCORE_NO, CHECK_NO, TITLE, COMMENTS, SCORENO) VALUES(2, 2, '생각안나...2', '몰라ㅜㅜ 테스트2', 6);
INSERT INTO PLUS_SCORE(PSCORE_NO, CHECK_NO, TITLE, COMMENTS, SCORENO) VALUES(3, 2, '생각안나...3', '몰라ㅜㅜ 테스트3', 9);

COMMIT;

--○ 체크리스트 테스트 데이터 3
INSERT INTO CHECKLIST(CHECK_NO, AC_NO, RES_NO, CHECKDATE, TITLE, ROADADDR, DONG_NO, WIDO, GYEONGDO)
VALUES(3, 1, 1, SYSDATE, '3체크리스트 시범데이터3', '3서울특별시 종로구 사직로 161(세종로)3', 1111011900, 37.57956788809389, 126.97702562251516);

INSERT INTO CONVENIENCE(CHECK_NO, MART, LAUNDRY, HOSPITAL, FOOD, CULTURE, PARK, COMMENTS) VALUES(3, 0, 1, 0, 0, 0, 0, NULL);

INSERT INTO WOLSE(CHECK_NO, MWOLSE, DEPOSIT) VALUES(3, 40, 3500);
INSERT INTO PET(CHECK_NO, COMMENTS, SCORENO) VALUES(3, '3코코가 좋아할듯3', 10);
INSERT INTO PLUS_SCORE(PSCORE_NO, CHECK_NO, TITLE, COMMENTS, SCORENO) VALUES(4, 3, '추가항목 널테스트1', null, 8);
INSERT INTO PLUS_SCORE(PSCORE_NO, CHECK_NO, TITLE, COMMENTS, SCORENO) VALUES(5, 3, '추가항목 널테스트2', null, 7);

COMMIT;


--○ 개별 체크리스트 조회 뷰 (추가항목 제외)
CREATE OR REPLACE VIEW VIEW_CHECKLIST
AS
SELECT CL.CHECK_NO, PN.PE_ID, PN.NICKNAME, RS.RESIDENCENAME
    , CL.CHECKDATE, CL.TITLE, CL.ROADADDR
    , G.GUNAME, CL.DONG_NO, D.DONGNAME, CL.WIDO, CL.GYEONGDO
    , WS.MWOLSE, WS.DEPOSIT, JS.MJEONSE, MM.MMAEMAE, GO.PLACE, GO.TIME
    , PES.SCORENAME AS PET_SCORE, PE.COMMENTS AS PET_COMMENTS, SES.SCORENAME AS SEC_SCORE, SE.COMMENTS AS SEC_COMMENTS
    , TPS.SCORENAME AS TP_SCORE, TP.COMMENTS AS TP_COMMENTS, HJS.SCORENAME AS HJ_SCORE, HJ.COMMENTS AS HJ_COMMENTS
    , CV.MART, CV.LAUNDRY, CV.HOSPITAL, CV.FOOD, CV.CULTURE, CV.PARK, CV.COMMENTS AS CON_COMMENTS
    , CO.GOOD, CO.BAD, CO.ETC, SC.COMMENTS AS SCMCOMMENTS
FROM CHECKLIST CL, PERSONAL PN, RESIDENCE RS, DONG D, GU G
    , WOLSE WS, JEONSE JS, MAEMAE MM, GOING GO
    , PET PE, SCORE PES, SECURITY SE, SCORE SES
    , TRANSPORT TP, SCORE TPS, HONJAP HJ, SCORE HJS
    , CONTENT CO, SECRET_CONTENT SC, CONVENIENCE CV
WHERE CL.AC_NO=PN.AC_NO
  AND CL.RES_NO=RS.RES_NO
  AND CL.DONG_NO=D.DONG_NO
  AND D.GU_NO=G.GU_NO
  AND CL.CHECK_NO=WS.CHECK_NO(+)
  AND CL.CHECK_NO=JS.CHECK_NO(+)
  AND CL.CHECK_NO=MM.CHECK_NO(+)
  AND CL.CHECK_NO=GO.CHECK_NO(+)
  AND CL.CHECK_NO=PE.CHECK_NO(+)
  AND PE.SCORENO=PES.SCORENO(+)
  AND CL.CHECK_NO=SE.CHECK_NO(+)
  AND SE.SCORENO=SES.SCORENO(+)
  AND CL.CHECK_NO=TP.CHECK_NO(+)
  AND TP.SCORENO=TPS.SCORENO(+)
  AND CL.CHECK_NO=HJ.CHECK_NO(+)
  AND HJ.SCORENO=HJS.SCORENO(+)
  AND CL.CHECK_NO=CV.CHECK_NO(+)
  AND CL.CHECK_NO=CO.CHECK_NO(+)
  AND CL.CHECK_NO=SC.CHECK_NO(+);
--==> View VIEW_CHECKLIST이(가) 생성되었습니다.

SELECT * FROM VIEW_CHECKLIST;
-- 부분 null이어도 데이터 조회되는지 확인 완

-- ① 근데 추가항목때문에 앞에 항목들이 중복돼서 보여주는 꼴이 돼서...
-- 추가항목부분을 분리해서 따로 뷰 만들까 고민중
-- 추가항목 따로 뷰 생성 완~~ (VIEW_CHECKLISTPLUS)

-- ② 근데 뷰에 항목별 점수 고유번호도 출력해야하나? 일단 뺐는데 필요하면 넣겠음
-- (ex 4.5점을 받았는지만 출력되게 하고 4.5점의 고유번호인 10은 출력 안되게 해놨음)

-- 추가
--○ 개별 체크리스트 조회 뷰 (추가항목만 조회)
CREATE OR REPLACE VIEW VIEW_CHECKLISTPLUS
AS
SELECT CL.CHECK_NO
    , PT.TITLE AS PT_TITLE, PT.TIME AS PT_TIME, PT.COMMENTS AS PT_COMMENTS       --추가항목
    , PS.TITLE AS PS_TITLE, PSS.SCORENAME AS PS_SCORE, PS.COMMENTS AS PS_COMMENTS  --추가항목
FROM CHECKLIST CL
    , PLUS_TIME PT, PLUS_SCORE PS, SCORE PSS            --추가항목
WHERE CL.CHECK_NO=PT.CHECK_NO(+)    --추가항목
  AND CL.CHECK_NO=PS.CHECK_NO(+)    --추가항목
  AND PS.SCORENO=PSS.SCORENO(+);    --추가항목
--==>> View VIEW_CHECKLISTPLUS이(가) 생성되었습니다.

SELECT * FROM VIEW_CHECKLISTPLUS;
-- 부분 null이어도 데이터 조회되는지 확인 완



CREATE SEQUENCE WITHDRAWALSEQ
NOCACHE;


------------------------------------------------------------------------------------------------------------------
--○ 미화
--○ 뷰 생성: 구매자가 작성한 리뷰
CREATE OR REPLACE VIEW REVIEWVIEW
AS    
SELECT G.GUIN_NO, G.FOOD, G.AC_NO AS SELLER_AC_NO, P1.PE_ID AS SELLER_ID
     , B.AC_NO AS REVIEWER_AC_NO, P2.PE_ID AS REVIEWER_ID
     , R.REVIEW_NO, RG.REGRADE_NO, RG.NAME AS RG_NAME, R.REVIEWDATE, R.COMMENTS
FROM GUIN G RIGHT JOIN BUYER B
     ON G.GUIN_NO = B.GUIN_NO
     LEFT JOIN PERSONAL P1
     ON G.AC_NO = P1.AC_NO
     RIGHT JOIN REVIEW R
     ON B.BUYER_NO = R.BUYER_NO
     LEFT JOIN REVIEWGRADE RG
     ON R.REGRADE_NO = RG.REGRADE_NO
     LEFT JOIN PERSONAL P2
     ON B.AC_NO = P2.AC_NO;

     
SELECT *
FROM REVIEWVIEW
ORDER BY REVIEW_NO;
--==>>
/*
1	떡볶이	        1	superman	2		        1	3	별로예요	2021-12-12	ㅡㅡ;;;;
2	탕수육과 짜장면	1	superman	2		        2	2	좋아요	2021-12-12	잘먹을게요..
3	파스타	        2		        1	superman	3	2	좋아요	2021-12-13	잘먹을게요ㅎ;
*/


--○ 뷰 생성: 판매자가 작성한 리뷰
CREATE OR REPLACE VIEW SELLERREVIEWVIEW
AS    
SELECT G.GUIN_NO, G.FOOD, G.AC_NO AS REVIEWER_AC_NO, P1.PE_ID AS REVIEWER_ID
     , B.AC_NO AS BUYER_AC_NO, P2.PE_ID AS BUYER_ID
     , R.REVIEW_NO, RG.REGRADE_NO, RG.NAME AS RG_NAME, R.REVIEWDATE, R.COMMENTS
FROM GUIN G RIGHT JOIN BUYER B
     ON G.GUIN_NO = B.GUIN_NO
     LEFT JOIN PERSONAL P1
     ON G.AC_NO = P1.AC_NO
     RIGHT JOIN SELLERREVIEW R
     ON B.BUYER_NO = R.BUYER_NO
     LEFT JOIN REVIEWGRADE RG
     ON R.REGRADE_NO = RG.REGRADE_NO
     LEFT JOIN PERSONAL P2
     ON B.AC_NO = P2.AC_NO;


SELECT *
FROM SELLERREVIEWVIEW
ORDER BY REVIEW_NO;
--==>>
/*
1	떡볶이	        1	superman	2		        1	1	최고예요	2021-12-13	좋은 분 ^^
2	탕수육과 짜장면	1	superman	2		        2	2	좋아요	    2021-12-13	ㅎㅎ
3	파스타	        2		        1	superman	3	1	최고예요	2021-12-13	자꾸보네용ㅎ
*/


--------------------------------------------------------------------------------


--○ 회원이 작성한 리뷰 조회하는 쿼리문
-- 구매자 작성 (→판매자 평가)
SELECT GUIN_NO, FOOD, SELLER_AC_NO, SELLER_ID, REVIEWER_AC_NO, REVIEWER_ID
     , REVIEW_NO, REGRADE_NO, RG_NAME, REVIEWDATE, COMMENTS
FROM REVIEWVIEW
--WHERE REVIEWER_ID = 'superman'
ORDER BY REVIEW_NO;


-- 판매자 작성 (→구매자 평가)
SELECT GUIN_NO, FOOD, REVIEWER_AC_NO, REVIEWER_ID, BUYER_AC_NO, BUYER_ID
     , REVIEW_NO, REGRADE_NO, RG_NAME, REVIEWDATE, COMMENTS
FROM SELLERREVIEWVIEW
--WHERE REVIEWER_ID = 'superman'
ORDER BY REVIEW_NO;


--○ 받은 매너 평가 갯수 조회하는 쿼리문(최고예요, 좋아요, 별로예요)
-- 구매자 작성 (→판매자 평가)
SELECT RG.REGRADE_NO, NVL(R.COUNT, 0) AS COUNT
FROM 
(
    SELECT REGRADE_NO
    FROM REVIEWVIEW
    
    UNION 
    
    SELECT REGRADE_NO
    FROM REVIEWGRADE
) RG
FULL OUTER JOIN
(
    SELECT REGRADE_NO, COUNT(*) AS COUNT
    FROM REVIEWVIEW
--  WHERE SELLER_AC_NO=2    -- 조회할 평가대상자 계정(판매자)
    GROUP BY REGRADE_NO
) R
ON RG.REGRADE_NO = R.REGRADE_NO;


-- 판매자 작성 (→구매자 평가)
SELECT RG.REGRADE_NO, NVL(R.COUNT, 0) AS COUNT
FROM 
(
    SELECT REGRADE_NO
    FROM SELLERREVIEWVIEW
    
    UNION 
    
    SELECT REGRADE_NO
    FROM REVIEWGRADE
) RG
FULL OUTER JOIN
(
    SELECT REGRADE_NO, COUNT(*) AS COUNT
    FROM SELLERREVIEWVIEW
--  WHERE BUYER_AC_NO=2    -- 조회할 평가대상자 계정(구매자)
    GROUP BY REGRADE_NO
) R
ON RG.REGRADE_NO = R.REGRADE_NO;



--○ 계정의 매너 포인트 조회
SELECT SELLER_POINT.POINT + BUYER_POINT.POINT + 50 AS POINT -- 기본점수: 50
FROM
(
    SELECT SUM(T.COUNT) AS POINT
    FROM
    (
        SELECT REGRADE_NO
             , CASE REGRADE_NO WHEN 1 THEN COUNT(*) -- +1
                               WHEN 3 THEN COUNT(*) -- -1
                               ELSE 0 
               END AS COUNT
        FROM REVIEWVIEW
   --   WHERE SELLER_AC_NO=2    -- 조회할 평가대상자 계정(판매자)
        GROUP BY REGRADE_NO
    ) T
) SELLER_POINT
, (
    SELECT SUM(T.COUNT) AS POINT
    FROM
    (
        SELECT REGRADE_NO
             , CASE REGRADE_NO WHEN 1 THEN COUNT(*) -- +1
                               WHEN 3 THEN COUNT(*) -- -1
                               ELSE 0 
               END AS COUNT
        FROM SELLERREVIEWVIEW
    --  WHERE BUYER_AC_NO=2    -- 조회할 평가대상자 계정(구매자)
        GROUP BY REGRADE_NO
    ) T
) BUYER_POINT;



--○ 구매자 리뷰의 매너 포인트
SELECT SUM(T.COUNT) AS POINT
FROM
(
    SELECT REGRADE_NO
         , CASE REGRADE_NO WHEN 1 THEN COUNT(*) -- +1
                           WHEN 3 THEN COUNT(*) -- -1
                           ELSE 0 
           END AS COUNT
    FROM REVIEWVIEW
--  WHERE SELLER_AC_NO=2    -- 조회할 평가대상자 계정(판매자)
    GROUP BY REGRADE_NO
) T;



--○ 판매자 리뷰의 매너 포인트
SELECT SUM(T.COUNT) AS POINT
FROM
(
    SELECT REGRADE_NO
         , CASE REGRADE_NO WHEN 1 THEN COUNT(*) -- +1
                           WHEN 3 THEN COUNT(*) -- -1
                           ELSE 0 
           END AS COUNT
    FROM SELLERREVIEWVIEW
--  WHERE BUYER_AC_NO=2    -- 조회할 평가대상자 계정(구매자)
    GROUP BY REGRADE_NO
) T;



--○ 계정의 매너등급 조회
SELECT CASE WHEN 51 > (SELECT SCORE FROM GRADE WHERE GRADE_NO=1) THEN (SELECT NAME FROM GRADE WHERE GRADE_NO=1)
            WHEN 51 > (SELECT SCORE FROM GRADE WHERE GRADE_NO=2) THEN (SELECT NAME FROM GRADE WHERE GRADE_NO=2)
            WHEN 51 > (SELECT SCORE FROM GRADE WHERE GRADE_NO=3) THEN (SELECT NAME FROM GRADE WHERE GRADE_NO=3)
            WHEN 51 > (SELECT SCORE FROM GRADE WHERE GRADE_NO=4) THEN (SELECT NAME FROM GRADE WHERE GRADE_NO=4)
            ELSE (SELECT NAME FROM GRADE WHERE GRADE_NO=5)
       END "USER_GRADE"
FROM DUAL;

--○ 뷰 생성: 리뷰들을 볼 수 있는 뷰
CREATE OR REPLACE VIEW REVIEWVIEW
AS    
SELECT G.GUIN_NO, G.FOOD, G.AC_NO AS SELLER_AC_NO, B.AC_NO AS REVIEWER_AC_NO, P.PE_ID AS REVIEWER_ID
     , R.REVIEW_NO, RG.REGRADE_NO, RG.NAME AS RG_NAME, R.REVIEWDATE, R.COMMENTS
FROM GUIN G RIGHT JOIN BUYER B
     ON G.GUIN_NO = B.GUIN_NO
     RIGHT JOIN REVIEW R
     ON B.BUYER_NO = R.BUYER_NO
     LEFT JOIN REVIEWGRADE RG
     ON R.REGRADE_NO = RG.REGRADE_NO
     LEFT JOIN PERSONAL P
     ON B.AC_NO = P.AC_NO;

--------------------------------------------------------------------------------
--○ 찬호
-- 1. 북마크(지역정보)
-- 계정, 북마크(지역)고유번호, 스티커내용, 동이름, 등록일자, 동고유번호 가져오기
CREATE OR REPLACE VIEW VIEW_LOCALBOOKMARK
AS
SELECT T.AC_NO, T.LO_B_NO, T.CONTENT, T.DONGNAME, T.MARKDATE, T.DONG_NO
FROM
(
SELECT C.AC_NO, C.LO_B_NO, A.CONTENT, D.DONGNAME, C.MARKDATE, C.DONG_NO
FROM STICKER A LEFT JOIN LOCALTAG B
ON A.CSTICKER_NO = B.CSTICKER_NO
JOIN LOCAL_BOOKMARK C
ON B.LO_B_NO = C.LO_B_NO
JOIN DONG D
ON D.DONG_NO = C.DONG_NO
)T

-- 2. 북마크(체크리스트)
-- 계정번호, 북마크(체크리스트)고유번호, 스티커내용, 등록일자
CREATE OR REPLACE VIEW VIEW_CHECKBOOKMARK
AS
SELECT T.AC_NO, T.CH_B_NO, T.CONTENT, T.MARKDATE
FROM
(
SELECT A.AC_NO, C.CH_B_NO, A.CONTENT, C.MARKDATE
FROM STICKER A LEFT JOIN CHECKTAG B
ON A.CSTICKER_NO = B.CSTICKER_NO
JOIN CHECK_BOOKMARK C
ON B.CH_B_NO = C.CH_B_NO
)T


--------------------------------------------------------------------------------
--○ 진하
--○ 북마크한 체크고유번호로 해당 스티커들 조회
--   북마크 체크리스트에서 체크리스트 고유번호, 스티커 내용
--   조인은 CHECKLIST, CHECK_BOOKMARK, CHECKTAG
SELECT V.DONGNO, S.CONTENT
FROM LOCALINFOVIEW V, LOCAL_BOOKMARK B, LOCALTAG T, STICKER S
WHERE V.DONGNO(+) = B.DONG_NO
 AND B.LO_B_NO(+) = T.LO_B_NO
 AND S.CSTICKER_NO(+) = T.CSTICKER_NO;

-- 뷰 생성
CREATE OR REPLACE VIEW VIEW_CHECKSTICKER
AS
SELECT CHECK_NO, CONTENT
FROM
(
    SELECT C.CHECK_NO, S.CONTENT
    FROM CHECKLIST C, CHECK_BOOKMARK B, CHECKTAG T, STICKER S
    WHERE C.CHECK_NO(+) = B.CHECK_NO
     AND B.CH_B_NO(+) = T.CH_B_NO
     AND S.CSTICKER_NO(+) = T.CSTICKER_NO
);
--==>> View VIEW_CHECKSTICKER이(가) 생성되었습니다.

-- 쿼리문 준비
SELECT CONTENT FROM VIEW_CHECKSTICKER WHERE CHECK_NO = 1
;
--==>>
/*
연남동
살고싶은동네
신축
*/

--○ 북마크한 지역정보에서 동번호로 스티커들 조회
--    조인은 LOCALINFOVIEW, LOCAK_BOOKMARK, LOCALTAG
SELECT V.DONGNO, S.CONTENT
FROM LOCALINFOVIEW V, LOCAL_BOOKMARK B, LOCALTAG T, STICKER S
WHERE V.DONGNO(+) = B.DONG_NO
 AND B.LO_B_NO(+) = T.LO_B_NO
 AND S.CSTICKER_NO(+) = T.CSTICKER_NO;

-- 뷰 생성
CREATE OR REPLACE VIEW VIEW_LOCALSTICKER
AS
SELECT V.DONGNO, S.CONTENT
FROM LOCALINFOVIEW V, LOCAL_BOOKMARK B, LOCALTAG T, STICKER S
WHERE V.DONGNO(+) = B.DONG_NO
 AND B.LO_B_NO(+) = T.LO_B_NO
 AND S.CSTICKER_NO(+) = T.CSTICKER_NO;
--==>> View VIEW_LOCALSTICKER이(가) 생성되었습니다.


-- 쿼리문 준비
SELECT CONTENT FROM VIEW_LOCALSTICKER WHERE DONGNO = 1144012000
;
--==>> 
/*
배달맛집천국
한강근처
진짜예쁜집
*/
SELECT CONTENT FROM VIEW_LOCALSTICKER WHERE DONGNO = 1117013100;
--==>> 한강근처
SELECT CONTENT FROM VIEW_LOCALSTICKER WHERE DONGNO = 1144012200;
--==>>
/*
다이소근처
한강근처
*/


--○ 내가 작성한 체크리스트 고유번호로 스티커들 조회
SELECT C.CHECK_NO, S.CONTENT
FROM CHECKLIST C, MYCHECKTAG T, STICKER S
WHERE C.CHECK_NO(+) = T.CHECK_NO
 AND S.CSTICKER_NO(+) = T.CSTICKER_NO;


CREATE OR REPLACE VIEW VIEW_MYCHECKSTICKER
AS 
SELECT C.CHECK_NO, S.CONTENT
FROM CHECKLIST C, MYCHECKTAG T, STICKER S
WHERE C.CHECK_NO(+) = T.CHECK_NO
 AND S.CSTICKER_NO(+) = T.CSTICKER_NO;
--==>> View VIEW_MYCHECKSTICKER이(가) 생성되었습니다.


-- 쿼리문 준비
SELECT CONTENT FROM VIEW_MYCHECKSTICKER WHERE CHECK_NO = 2
;
--==>> 
/*
살고싶은동네
신축
도서관근처
*/
SELECT CONTENT FROM VIEW_MYCHECKSTICKER WHERE CHECK_NO = 68;
--==>>
/*
연남동
살고싶은동네
*/

--○ MYCHECKSTICKER에 데이터 넣기
SELECT * FROM CHECKLIST WHERE AC_NO=1;
SELECT * FROM STICKER WHERE AC_NO=1;

INSERT INTO MYCHECKTAG(MC_TAG_NO, CHECK_NO, CSTICKER_NO) VALUES(1, 2, 2);
INSERT INTO MYCHECKTAG(MC_TAG_NO, CHECK_NO, CSTICKER_NO) VALUES(2, 2, 3);
INSERT INTO MYCHECKTAG(MC_TAG_NO, CHECK_NO, CSTICKER_NO) VALUES(3, 2, 9);
INSERT INTO MYCHECKTAG(MC_TAG_NO, CHECK_NO, CSTICKER_NO) VALUES(4, 6, 2);
INSERT INTO MYCHECKTAG(MC_TAG_NO, CHECK_NO, CSTICKER_NO) VALUES(5, 6, 8);
INSERT INTO MYCHECKTAG(MC_TAG_NO, CHECK_NO, CSTICKER_NO) VALUES(6, 68, 1);
INSERT INTO MYCHECKTAG(MC_TAG_NO, CHECK_NO, CSTICKER_NO) VALUES(7, 68, 2);
--==>> 1 행 이(가) 삽입되었습니다. * 7

--○ LOCAL_BOOKMARK에 데이터 넣기 -> 28번 AC_NO에 대하여
SELECT * FROM CHECKLIST WHERE AC_NO=28; --> 5건 데이터 있음
SELECT * FROM CHECKLIST;
SELECT * FROM LOCAL_BOOKMARK;
SELECT * FROM STICKER; --> 존재하는 AC_NO 1,2,3
SELECT * FROM LOCALTAG;

--1. STICKER 테이블에 AC_NO가 28번인 데이터 삽입
--2. LOCALBOOKMARK 테이블에 AC_NO가 28번인 데이터 삽입 (LOCALINFOVIEW에 존재하는 DONGNO로!!)
--3. LOCALTAG 테이블에 위의 해당하는 데이터들 삽입
INSERT INTO STICKER(CSTICKER_NO, AC_NO, CONTENT) VALUES(12, 28, '배달맛집천국');
INSERT INTO STICKER(CSTICKER_NO, AC_NO, CONTENT) VALUES(13, 28, '한강근처');
INSERT INTO STICKER(CSTICKER_NO, AC_NO, CONTENT) VALUES(14, 28, '진짜예쁜집');
INSERT INTO STICKER(CSTICKER_NO, AC_NO, CONTENT) VALUES(15, 28, '다이소근처');
--==>> 1 행 이(가) 삽입되었습니다. * 4

INSERT INTO LOCAL_BOOKMARK(LO_B_NO, DONG_NO, AC_NO, MARKDATE) VALUES(3, 1144012000, 28, SYSDATE);
INSERT INTO LOCAL_BOOKMARK(LO_B_NO, DONG_NO, AC_NO, MARKDATE) VALUES(4, 1117013100, 28, SYSDATE);
INSERT INTO LOCAL_BOOKMARK(LO_B_NO, DONG_NO, AC_NO, MARKDATE) VALUES(5, 1144012200, 28, SYSDATE);
--==>> 1 행 이(가) 삽입되었습니다. * 3

INSERT INTO LOCALTAG(LO_TAG_NO, LO_B_NO, CSTICKER_NO) VALUES(10, 3, 12);
INSERT INTO LOCALTAG(LO_TAG_NO, LO_B_NO, CSTICKER_NO) VALUES(11, 3, 13);
INSERT INTO LOCALTAG(LO_TAG_NO, LO_B_NO, CSTICKER_NO) VALUES(12, 3, 14);
INSERT INTO LOCALTAG(LO_TAG_NO, LO_B_NO, CSTICKER_NO) VALUES(13, 4, 13);
INSERT INTO LOCALTAG(LO_TAG_NO, LO_B_NO, CSTICKER_NO) VALUES(14, 5, 15);
INSERT INTO LOCALTAG(LO_TAG_NO, LO_B_NO, CSTICKER_NO) VALUES(15, 5, 13);